name: linuxserver-kasm
services:
  app:
    image: linuxserver/kasm:1.16.1
    restart: unless-stopped
    environment:
      KASM_PORT: ''
      DOCKER_HUB_USERNAME: ''
      DOCKER_HUB_PASSWORD: ''
      DOCKER_MTU: ''
    x-casaos:
      envs:
        - container: KASM_PORT
          description:
            en_us: Specify the port you bind to the outside for Kasm Workspaces.
        - container: DOCKER_HUB_USERNAME
          description:
            en_us: Optionally specify a DockerHub Username to pull private images.
        - container: DOCKER_HUB_PASSWORD
          description:
            en_us: Optionally specify a DockerHub password to pull private images.
        - container: DOCKER_MTU
          description:
            en_us: Optionally specify the mtu options passed to dockerd.
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - type: bind
        source: /DATA/AppData/kasm/opt
        target: /opt
      - type: bind
        source: /DATA/AppData/kasm/profiles
        target: /profiles
      - type: bind
        source: /dev/input
        target: /dev/input
      - type: bind
        source: /run/udev/data
        target: /run/udev/data
x-casaos:
  architectures:
    - amd64
    - arm64
  main: app
  description:
    en_us: Kasm Workspaces is a docker container streaming platform for delivering browser-based access to desktops, applications, and web services. Kasm uses devops-enabled Containerized Desktop Infrastructure (CDI) to create on-demand, disposable, docker containers that are accessible via web browser. Example use-cases include Remote Browser Isolation (RBI), Data Loss Prevention (DLP), Desktop as a Service (DaaS), Secure Remote Access Services (RAS), and Open Source Intelligence (OSINT) collections. The rendering of the graphical-based containers is powered by the open-source project KasmVNC.
  tagline:
    en_us: Workspaces is a docker container streaming platform for delivering browser-based access to desktops, applications, and web services. Kasm uses devops-enabled Containerized Desktop Infrastructure (CDI) to create on-demand, disposable, docker containers that are accessible via web browser. Example use-cases include Remote Browser Isolation (RBI), Data Loss Prevention (DLP), Desktop as a Service (DaaS), Secure Remote Access Services (RAS), and Open Source Intelligence (OSINT) collections. The rendering of the graphical-based containers is powered by the open-source project KasmVNC.
  developer: LinuxServer.io
  author: WisdomSky
  icon: https://kasm-ci.s3.amazonaws.com/kasm_wide.png
  thumbnail: https://kasm-ci.s3.amazonaws.com/kasm_wide.png
  title:
    en_us: Kasm
  category: LinuxServer.io
